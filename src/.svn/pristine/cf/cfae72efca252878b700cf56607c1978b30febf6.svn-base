package Common;

import java.io.IOException;
import java.util.Date;
import java.util.List;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.hbase.HColumnDescriptor;
import org.apache.hadoop.hbase.HTableDescriptor;
import org.apache.hadoop.hbase.KeyValue;
import org.apache.hadoop.hbase.client.Delete;
import org.apache.hadoop.hbase.client.Get;
import org.apache.hadoop.hbase.client.HBaseAdmin;
import org.apache.hadoop.hbase.client.HTable;
import org.apache.hadoop.hbase.client.Put;
import org.apache.hadoop.hbase.client.Result;
import org.apache.hadoop.hbase.client.ResultScanner;
import org.apache.hadoop.hbase.client.Scan;
import org.apache.hadoop.hbase.filter.FilterList;
import org.apache.hadoop.hbase.thrift.generated.Hbase.get_args;
import org.apache.hadoop.hbase.util.Bytes;



public abstract class AbstractTable{
	// communite with hbase table
	// HTable对象对于客户端读写数据来说不是线程安全的，因此多线程时，要为每个线程单独创建复用一个HTable对象，不同对象间不要共享HTable对象使用，特别是在客户端auto
	// flash被置为false时，由于存在本地write buffer，可能导致数据不一致。
	
	//此处ytt加的一个HBaseAdmin
	protected HBaseAdmin admin = null;
	
	protected HTable hTable = null;
	
	
	/**
	 * 建表
	 * 
	 * @author ytt
	 * @configuration
	 * @param tablename
	 * @param family
	 * @
	 */
	public void createTable(Configuration conf, String tablename, String[] family)throws IOException{
		admin = new HBaseAdmin(conf);
		HTableDescriptor desc = new HTableDescriptor(tablename);
		for(int i = 0; i < family.length; i++){
			desc.addFamily(new HColumnDescriptor(family[i]));
			
		}
		if(admin.tableExists(tablename)){
			System.out.println(tablename + " is Exits!");
			//System.exit(0);
		}else {
			admin.createTable(desc);
			System.out.println(tablename + "created Success!");
		}
	}
	
	
	
	
	
	/**
	 * 存储
	 * 
	 * @param rowKey
	 *            行键
	 * @param timestamp
	 *            时间戳 
	 * @param kvs
	 * @return
	 */
	
	public Boolean put(byte[] rowKey, Date timestamp, List<KeyValue> kvs) {
		Put put = null;
		if (timestamp == null) {
			put = new Put(rowKey);
		} else {
			put = new Put(rowKey, timestamp.getTime());
		}

		try {
			for (KeyValue kv : kvs) {
				put.add(kv);
			}
			hTable.put(put);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return false;
		}

		return true;
	}
	
	/**
	 * 查询，没有则返回null
	 * 
	 * @param rowKey
	 * @param cfList
	 * @param columnList
	 * @param setMaxVersion 取所有的版本
	 * @return
	 */
	public Result get(byte[] rowKey, Date timestamp
			,List<byte[]> cfList, List<Column> columnList, Boolean setMaxVersion ) {
		Get get = new Get(rowKey);
		if(timestamp != null){
			get.setTimeStamp(timestamp.getTime());
		}
		// 添加列族
		if (cfList != null) {
			for (byte[] cf : cfList) {
				get.addFamily(cf);
			}
		}
		// 添加列
		if (columnList != null) {
			for (Column col : columnList) {
				get.addColumn(col.getCF_NAME(), col.getCOL_NAME());
			}
		}
		
		if(setMaxVersion){
			
			get.setMaxVersions();
		}
		
		try {
			// r永远不会为null呢
			Result r = hTable.get(get);
			return r;
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return null;

	}
	
	
	/**
	 * @author ytt
	 * 
	 * 查询某列数据的多个版本
	 * 
	 * @param versionNum 获取versionNum个版本的数据
	 * @throws IOException 
	 * 
	 * 
	 */
	
	public Result get(byte[] rowKey, List<byte[]> cfList, List<Column> columnList, int versionNum ) throws IOException {
		Get get = new Get(rowKey);
		

		// 添加列族
		if (cfList != null) {
			for (byte[] cf : cfList) {
				get.addFamily(cf);
			}
		}
		// 添加列
		if (columnList != null) {
			for (Column col : columnList) {
				get.addColumn(col.getCF_NAME(), col.getCOL_NAME());
			}
		}
			get.setMaxVersions(versionNum);
		try {
			// r永远不会为null呢
			Result r = hTable.get(get);
			return r;
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return null;

	}
	
	/**
	 * @author ytt
	 * 
	 * 
	 * 
	 * */
	public Result get(Get get) throws IOException{
		Get get2 = get;
		return hTable.get(get2);
	}
	
	
	
	
	
	
	
	
	/**
	 * 扫描，失败返回null
	 * @param scan
	 * @param cfList
	 * @param columnList
	 * @param f
	 * @return
	 */
	
	public ResultScanner scan(Scan scan,List<byte[]> cfList, List<Column> columnList,
			FilterList f) {
		if(scan == null){
			scan = new Scan();
		}
		if (cfList != null) {
			for (byte[] cf : cfList) {
				scan.addFamily(cf);
			}
		}
		if(columnList != null){
			for(Column c : columnList){
				scan.addColumn(c.getCF_NAME(), c.getCOL_NAME());
			}	
		}
		if(f != null){
			scan.setFilter(f);
		}
		
		
		try {
			ResultScanner rs =  hTable.getScanner(scan);
			return rs;
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return null;
		
	}
	
	
	/**
	 * @author ytt
	 * 是否存在某一个行
	 * 
	 * 
	 * */
	
	public boolean rowExists(Get get)throws Exception{
		return hTable.exists(get);
	}
	
	
	/**
	 * 删除某一列
	 * @author ytt
	 * 
	 * @param rowKey
	 * 
	 * @param familyName
	 * 
	 * @param columnName
	 * 
	 * */
	public void deleteColumn(String rowKey, String familyName,
			String columnName)throws IOException{
		Delete delete = new Delete(Bytes.toBytes(rowKey));
		delete.deleteColumn(Bytes.toBytes(familyName), Bytes.toBytes(columnName));
		hTable.delete(delete);
		System.out.println(familyName + " and " + columnName + " is deleted !! ");
	}
	
	
	/**
	 * 计数器的操作
	 * @author ytt
	 * @throws IOException 
	 * 
	 * 
	 * */
	
	public long countColumn(String rowKey, String familyName, 
			String columnName,long  amount) throws IOException{
		return hTable.incrementColumnValue(Bytes.toBytes(rowKey), Bytes.toBytes(familyName), 
				Bytes.toBytes(columnName), amount);
		
	}
	/**
	 * 计数器的操作2
	 * @author ytt
	 * @throws IOException 
	 * 
	 * 
	 * */
	
	public long countColumn(byte[] rowKey, byte[] familyName, 
			byte[] columnName,long  amount) throws IOException{
		return hTable.incrementColumnValue(rowKey,familyName,columnName,amount);
		
	}
	
	
	/**
	 * @author ytt
	 * 删除整张表
	 * @param tableName
	 * 
	 * 
	 * */
	public void deleteTable(String tableName) throws IOException{
		admin.disableTable(tableName);
		admin.deleteTable(tableName);
		System.out.println(tableName + " is deleted!!!!");
	}
	
}
